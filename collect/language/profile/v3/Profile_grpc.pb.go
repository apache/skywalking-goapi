//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: profile/Profile.proto

package v3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	v3 "skywalking.apache.org/repo/goapi/collect/common/v3"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProfileTask_GetProfileTaskCommands_FullMethodName = "/skywalking.v3.ProfileTask/getProfileTaskCommands"
	ProfileTask_CollectSnapshot_FullMethodName        = "/skywalking.v3.ProfileTask/collectSnapshot"
	ProfileTask_GoProfileReport_FullMethodName        = "/skywalking.v3.ProfileTask/goProfileReport"
	ProfileTask_ReportTaskFinish_FullMethodName       = "/skywalking.v3.ProfileTask/reportTaskFinish"
)

// ProfileTaskClient is the client API for ProfileTask service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfileTaskClient interface {
	// query all sniffer need to execute profile task commands
	GetProfileTaskCommands(ctx context.Context, in *ProfileTaskCommandQuery, opts ...grpc.CallOption) (*v3.Commands, error)
	// collect dumped thread snapshot
	CollectSnapshot(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ThreadSnapshot, v3.Commands], error)
	// collect bytes profile data from go agent
	GoProfileReport(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[GoProfileData, v3.Commands], error)
	// report profiling task finished
	ReportTaskFinish(ctx context.Context, in *ProfileTaskFinishReport, opts ...grpc.CallOption) (*v3.Commands, error)
}

type profileTaskClient struct {
	cc grpc.ClientConnInterface
}

func NewProfileTaskClient(cc grpc.ClientConnInterface) ProfileTaskClient {
	return &profileTaskClient{cc}
}

func (c *profileTaskClient) GetProfileTaskCommands(ctx context.Context, in *ProfileTaskCommandQuery, opts ...grpc.CallOption) (*v3.Commands, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v3.Commands)
	err := c.cc.Invoke(ctx, ProfileTask_GetProfileTaskCommands_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileTaskClient) CollectSnapshot(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ThreadSnapshot, v3.Commands], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProfileTask_ServiceDesc.Streams[0], ProfileTask_CollectSnapshot_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ThreadSnapshot, v3.Commands]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProfileTask_CollectSnapshotClient = grpc.ClientStreamingClient[ThreadSnapshot, v3.Commands]

func (c *profileTaskClient) GoProfileReport(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[GoProfileData, v3.Commands], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProfileTask_ServiceDesc.Streams[1], ProfileTask_GoProfileReport_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GoProfileData, v3.Commands]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProfileTask_GoProfileReportClient = grpc.ClientStreamingClient[GoProfileData, v3.Commands]

func (c *profileTaskClient) ReportTaskFinish(ctx context.Context, in *ProfileTaskFinishReport, opts ...grpc.CallOption) (*v3.Commands, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v3.Commands)
	err := c.cc.Invoke(ctx, ProfileTask_ReportTaskFinish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileTaskServer is the server API for ProfileTask service.
// All implementations must embed UnimplementedProfileTaskServer
// for forward compatibility.
type ProfileTaskServer interface {
	// query all sniffer need to execute profile task commands
	GetProfileTaskCommands(context.Context, *ProfileTaskCommandQuery) (*v3.Commands, error)
	// collect dumped thread snapshot
	CollectSnapshot(grpc.ClientStreamingServer[ThreadSnapshot, v3.Commands]) error
	// collect bytes profile data from go agent
	GoProfileReport(grpc.ClientStreamingServer[GoProfileData, v3.Commands]) error
	// report profiling task finished
	ReportTaskFinish(context.Context, *ProfileTaskFinishReport) (*v3.Commands, error)
	mustEmbedUnimplementedProfileTaskServer()
}

// UnimplementedProfileTaskServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProfileTaskServer struct{}

func (UnimplementedProfileTaskServer) GetProfileTaskCommands(context.Context, *ProfileTaskCommandQuery) (*v3.Commands, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileTaskCommands not implemented")
}
func (UnimplementedProfileTaskServer) CollectSnapshot(grpc.ClientStreamingServer[ThreadSnapshot, v3.Commands]) error {
	return status.Errorf(codes.Unimplemented, "method CollectSnapshot not implemented")
}
func (UnimplementedProfileTaskServer) GoProfileReport(grpc.ClientStreamingServer[GoProfileData, v3.Commands]) error {
	return status.Errorf(codes.Unimplemented, "method GoProfileReport not implemented")
}
func (UnimplementedProfileTaskServer) ReportTaskFinish(context.Context, *ProfileTaskFinishReport) (*v3.Commands, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTaskFinish not implemented")
}
func (UnimplementedProfileTaskServer) mustEmbedUnimplementedProfileTaskServer() {}
func (UnimplementedProfileTaskServer) testEmbeddedByValue()                     {}

// UnsafeProfileTaskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfileTaskServer will
// result in compilation errors.
type UnsafeProfileTaskServer interface {
	mustEmbedUnimplementedProfileTaskServer()
}

func RegisterProfileTaskServer(s grpc.ServiceRegistrar, srv ProfileTaskServer) {
	// If the following call pancis, it indicates UnimplementedProfileTaskServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProfileTask_ServiceDesc, srv)
}

func _ProfileTask_GetProfileTaskCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileTaskCommandQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileTaskServer).GetProfileTaskCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileTask_GetProfileTaskCommands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileTaskServer).GetProfileTaskCommands(ctx, req.(*ProfileTaskCommandQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileTask_CollectSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProfileTaskServer).CollectSnapshot(&grpc.GenericServerStream[ThreadSnapshot, v3.Commands]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProfileTask_CollectSnapshotServer = grpc.ClientStreamingServer[ThreadSnapshot, v3.Commands]

func _ProfileTask_GoProfileReport_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProfileTaskServer).GoProfileReport(&grpc.GenericServerStream[GoProfileData, v3.Commands]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProfileTask_GoProfileReportServer = grpc.ClientStreamingServer[GoProfileData, v3.Commands]

func _ProfileTask_ReportTaskFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileTaskFinishReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileTaskServer).ReportTaskFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileTask_ReportTaskFinish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileTaskServer).ReportTaskFinish(ctx, req.(*ProfileTaskFinishReport))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfileTask_ServiceDesc is the grpc.ServiceDesc for ProfileTask service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfileTask_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "skywalking.v3.ProfileTask",
	HandlerType: (*ProfileTaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getProfileTaskCommands",
			Handler:    _ProfileTask_GetProfileTaskCommands_Handler,
		},
		{
			MethodName: "reportTaskFinish",
			Handler:    _ProfileTask_ReportTaskFinish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "collectSnapshot",
			Handler:       _ProfileTask_CollectSnapshot_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "goProfileReport",
			Handler:       _ProfileTask_GoProfileReport_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "profile/Profile.proto",
}
