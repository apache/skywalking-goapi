//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: profile/Profile.proto

package v3

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	v3 "skywalking.apache.org/repo/goapi/collect/common/v3"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProfileTaskCommandQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// current sniffer information
	Service         string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	ServiceInstance string `protobuf:"bytes,2,opt,name=serviceInstance,proto3" json:"serviceInstance,omitempty"`
	// last command timestamp
	LastCommandTime int64 `protobuf:"varint,3,opt,name=lastCommandTime,proto3" json:"lastCommandTime,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ProfileTaskCommandQuery) Reset() {
	*x = ProfileTaskCommandQuery{}
	mi := &file_profile_Profile_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileTaskCommandQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileTaskCommandQuery) ProtoMessage() {}

func (x *ProfileTaskCommandQuery) ProtoReflect() protoreflect.Message {
	mi := &file_profile_Profile_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileTaskCommandQuery.ProtoReflect.Descriptor instead.
func (*ProfileTaskCommandQuery) Descriptor() ([]byte, []int) {
	return file_profile_Profile_proto_rawDescGZIP(), []int{0}
}

func (x *ProfileTaskCommandQuery) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *ProfileTaskCommandQuery) GetServiceInstance() string {
	if x != nil {
		return x.ServiceInstance
	}
	return ""
}

func (x *ProfileTaskCommandQuery) GetLastCommandTime() int64 {
	if x != nil {
		return x.LastCommandTime
	}
	return 0
}

// dumped thread snapshot
type ThreadSnapshot struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// profile task id
	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	// dumped segment id
	TraceSegmentId string `protobuf:"bytes,2,opt,name=traceSegmentId,proto3" json:"traceSegmentId,omitempty"`
	// dump timestamp
	Time int64 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	// snapshot dump sequence, start with zero
	Sequence int32 `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// snapshot stack
	Stack         *ThreadStack `protobuf:"bytes,5,opt,name=stack,proto3" json:"stack,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ThreadSnapshot) Reset() {
	*x = ThreadSnapshot{}
	mi := &file_profile_Profile_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThreadSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadSnapshot) ProtoMessage() {}

func (x *ThreadSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_profile_Profile_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadSnapshot.ProtoReflect.Descriptor instead.
func (*ThreadSnapshot) Descriptor() ([]byte, []int) {
	return file_profile_Profile_proto_rawDescGZIP(), []int{1}
}

func (x *ThreadSnapshot) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ThreadSnapshot) GetTraceSegmentId() string {
	if x != nil {
		return x.TraceSegmentId
	}
	return ""
}

func (x *ThreadSnapshot) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ThreadSnapshot) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *ThreadSnapshot) GetStack() *ThreadStack {
	if x != nil {
		return x.Stack
	}
	return nil
}

type ThreadStack struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// stack code signature list
	CodeSignatures []string `protobuf:"bytes,1,rep,name=codeSignatures,proto3" json:"codeSignatures,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ThreadStack) Reset() {
	*x = ThreadStack{}
	mi := &file_profile_Profile_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThreadStack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadStack) ProtoMessage() {}

func (x *ThreadStack) ProtoReflect() protoreflect.Message {
	mi := &file_profile_Profile_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadStack.ProtoReflect.Descriptor instead.
func (*ThreadStack) Descriptor() ([]byte, []int) {
	return file_profile_Profile_proto_rawDescGZIP(), []int{2}
}

func (x *ThreadStack) GetCodeSignatures() []string {
	if x != nil {
		return x.CodeSignatures
	}
	return nil
}

// profile task finished report
type ProfileTaskFinishReport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// current sniffer information
	Service         string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	ServiceInstance string `protobuf:"bytes,2,opt,name=serviceInstance,proto3" json:"serviceInstance,omitempty"`
	// profile task
	TaskId        string `protobuf:"bytes,3,opt,name=taskId,proto3" json:"taskId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProfileTaskFinishReport) Reset() {
	*x = ProfileTaskFinishReport{}
	mi := &file_profile_Profile_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileTaskFinishReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileTaskFinishReport) ProtoMessage() {}

func (x *ProfileTaskFinishReport) ProtoReflect() protoreflect.Message {
	mi := &file_profile_Profile_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileTaskFinishReport.ProtoReflect.Descriptor instead.
func (*ProfileTaskFinishReport) Descriptor() ([]byte, []int) {
	return file_profile_Profile_proto_rawDescGZIP(), []int{3}
}

func (x *ProfileTaskFinishReport) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *ProfileTaskFinishReport) GetServiceInstance() string {
	if x != nil {
		return x.ServiceInstance
	}
	return ""
}

func (x *ProfileTaskFinishReport) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// profile for go agent
type GoProfileData struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	TaskId string                 `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	// the truly profile data
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	// check last part true or false
	IsLast        bool `protobuf:"varint,3,opt,name=isLast,proto3" json:"isLast,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GoProfileData) Reset() {
	*x = GoProfileData{}
	mi := &file_profile_Profile_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoProfileData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoProfileData) ProtoMessage() {}

func (x *GoProfileData) ProtoReflect() protoreflect.Message {
	mi := &file_profile_Profile_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoProfileData.ProtoReflect.Descriptor instead.
func (*GoProfileData) Descriptor() ([]byte, []int) {
	return file_profile_Profile_proto_rawDescGZIP(), []int{4}
}

func (x *GoProfileData) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GoProfileData) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *GoProfileData) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

var File_profile_Profile_proto protoreflect.FileDescriptor

const file_profile_Profile_proto_rawDesc = "" +
	"\n" +
	"\x15profile/Profile.proto\x12\rskywalking.v3\x1a\x14common/Command.proto\"\x87\x01\n" +
	"\x17ProfileTaskCommandQuery\x12\x18\n" +
	"\aservice\x18\x01 \x01(\tR\aservice\x12(\n" +
	"\x0fserviceInstance\x18\x02 \x01(\tR\x0fserviceInstance\x12(\n" +
	"\x0flastCommandTime\x18\x03 \x01(\x03R\x0flastCommandTime\"\xb2\x01\n" +
	"\x0eThreadSnapshot\x12\x16\n" +
	"\x06taskId\x18\x01 \x01(\tR\x06taskId\x12&\n" +
	"\x0etraceSegmentId\x18\x02 \x01(\tR\x0etraceSegmentId\x12\x12\n" +
	"\x04time\x18\x03 \x01(\x03R\x04time\x12\x1a\n" +
	"\bsequence\x18\x04 \x01(\x05R\bsequence\x120\n" +
	"\x05stack\x18\x05 \x01(\v2\x1a.skywalking.v3.ThreadStackR\x05stack\"5\n" +
	"\vThreadStack\x12&\n" +
	"\x0ecodeSignatures\x18\x01 \x03(\tR\x0ecodeSignatures\"u\n" +
	"\x17ProfileTaskFinishReport\x12\x18\n" +
	"\aservice\x18\x01 \x01(\tR\aservice\x12(\n" +
	"\x0fserviceInstance\x18\x02 \x01(\tR\x0fserviceInstance\x12\x16\n" +
	"\x06taskId\x18\x03 \x01(\tR\x06taskId\"Y\n" +
	"\rGoProfileData\x12\x16\n" +
	"\x06taskId\x18\x01 \x01(\tR\x06taskId\x12\x18\n" +
	"\apayload\x18\x02 \x01(\fR\apayload\x12\x16\n" +
	"\x06isLast\x18\x03 \x01(\bR\x06isLast2\xde\x02\n" +
	"\vProfileTask\x12[\n" +
	"\x16getProfileTaskCommands\x12&.skywalking.v3.ProfileTaskCommandQuery\x1a\x17.skywalking.v3.Commands\"\x00\x12M\n" +
	"\x0fcollectSnapshot\x12\x1d.skywalking.v3.ThreadSnapshot\x1a\x17.skywalking.v3.Commands\"\x00(\x01\x12L\n" +
	"\x0fgoProfileReport\x12\x1c.skywalking.v3.GoProfileData\x1a\x17.skywalking.v3.Commands\"\x00(\x01\x12U\n" +
	"\x10reportTaskFinish\x12&.skywalking.v3.ProfileTaskFinishReport\x1a\x17.skywalking.v3.Commands\"\x00B\x97\x01\n" +
	"5org.apache.skywalking.apm.network.language.profile.v3P\x01Z<skywalking.apache.org/repo/goapi/collect/language/profile/v3\xaa\x02\x1dSkyWalking.NetworkProtocol.V3b\x06proto3"

var (
	file_profile_Profile_proto_rawDescOnce sync.Once
	file_profile_Profile_proto_rawDescData []byte
)

func file_profile_Profile_proto_rawDescGZIP() []byte {
	file_profile_Profile_proto_rawDescOnce.Do(func() {
		file_profile_Profile_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_profile_Profile_proto_rawDesc), len(file_profile_Profile_proto_rawDesc)))
	})
	return file_profile_Profile_proto_rawDescData
}

var file_profile_Profile_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_profile_Profile_proto_goTypes = []any{
	(*ProfileTaskCommandQuery)(nil), // 0: skywalking.v3.ProfileTaskCommandQuery
	(*ThreadSnapshot)(nil),          // 1: skywalking.v3.ThreadSnapshot
	(*ThreadStack)(nil),             // 2: skywalking.v3.ThreadStack
	(*ProfileTaskFinishReport)(nil), // 3: skywalking.v3.ProfileTaskFinishReport
	(*GoProfileData)(nil),           // 4: skywalking.v3.GoProfileData
	(*v3.Commands)(nil),             // 5: skywalking.v3.Commands
}
var file_profile_Profile_proto_depIdxs = []int32{
	2, // 0: skywalking.v3.ThreadSnapshot.stack:type_name -> skywalking.v3.ThreadStack
	0, // 1: skywalking.v3.ProfileTask.getProfileTaskCommands:input_type -> skywalking.v3.ProfileTaskCommandQuery
	1, // 2: skywalking.v3.ProfileTask.collectSnapshot:input_type -> skywalking.v3.ThreadSnapshot
	4, // 3: skywalking.v3.ProfileTask.goProfileReport:input_type -> skywalking.v3.GoProfileData
	3, // 4: skywalking.v3.ProfileTask.reportTaskFinish:input_type -> skywalking.v3.ProfileTaskFinishReport
	5, // 5: skywalking.v3.ProfileTask.getProfileTaskCommands:output_type -> skywalking.v3.Commands
	5, // 6: skywalking.v3.ProfileTask.collectSnapshot:output_type -> skywalking.v3.Commands
	5, // 7: skywalking.v3.ProfileTask.goProfileReport:output_type -> skywalking.v3.Commands
	5, // 8: skywalking.v3.ProfileTask.reportTaskFinish:output_type -> skywalking.v3.Commands
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_profile_Profile_proto_init() }
func file_profile_Profile_proto_init() {
	if File_profile_Profile_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_profile_Profile_proto_rawDesc), len(file_profile_Profile_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_profile_Profile_proto_goTypes,
		DependencyIndexes: file_profile_Profile_proto_depIdxs,
		MessageInfos:      file_profile_Profile_proto_msgTypes,
	}.Build()
	File_profile_Profile_proto = out.File
	file_profile_Profile_proto_goTypes = nil
	file_profile_Profile_proto_depIdxs = nil
}
