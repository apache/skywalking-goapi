//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: satellite/SniffData.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	v35 "skywalking.apache.org/repo/goapi/collect/event/v3"
	v3 "skywalking.apache.org/repo/goapi/collect/language/agent/v3"
	v33 "skywalking.apache.org/repo/goapi/collect/language/profile/v3"
	v31 "skywalking.apache.org/repo/goapi/collect/logging/v3"
	v32 "skywalking.apache.org/repo/goapi/collect/management/v3"
	v34 "skywalking.apache.org/repo/goapi/collect/servicemesh/v3"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SniffType declares the supported transfer data type.
type SniffType int32

const (
	SniffType_CLRMetricType   SniffType = 0
	SniffType_JVMMetricType   SniffType = 1
	SniffType_MeterType       SniffType = 2
	SniffType_TracingType     SniffType = 3
	SniffType_Logging         SniffType = 4
	SniffType_ManagementType  SniffType = 5
	SniffType_ProfileType     SniffType = 6
	SniffType_ServiceMeshType SniffType = 7
	SniffType_EventType       SniffType = 8
)

// Enum value maps for SniffType.
var (
	SniffType_name = map[int32]string{
		0: "CLRMetricType",
		1: "JVMMetricType",
		2: "MeterType",
		3: "TracingType",
		4: "Logging",
		5: "ManagementType",
		6: "ProfileType",
		7: "ServiceMeshType",
		8: "EventType",
	}
	SniffType_value = map[string]int32{
		"CLRMetricType":   0,
		"JVMMetricType":   1,
		"MeterType":       2,
		"TracingType":     3,
		"Logging":         4,
		"ManagementType":  5,
		"ProfileType":     6,
		"ServiceMeshType": 7,
		"EventType":       8,
	}
)

func (x SniffType) Enum() *SniffType {
	p := new(SniffType)
	*p = x
	return p
}

func (x SniffType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SniffType) Descriptor() protoreflect.EnumDescriptor {
	return file_satellite_SniffData_proto_enumTypes[0].Descriptor()
}

func (SniffType) Type() protoreflect.EnumType {
	return &file_satellite_SniffData_proto_enumTypes[0]
}

func (x SniffType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SniffType.Descriptor instead.
func (SniffType) EnumDescriptor() ([]byte, []int) {
	return file_satellite_SniffData_proto_rawDescGZIP(), []int{0}
}

// SniffData is the transfer unit in Satellite.
type SniffData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The occur time.
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// unique event name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The data type.
	Type SniffType `protobuf:"varint,3,opt,name=type,proto3,enum=skywalking.v3.SniffType" json:"type,omitempty"`
	// Whether to send to remote. It is used in sampling.
	Remote bool `protobuf:"varint,4,opt,name=remote,proto3" json:"remote,omitempty"`
	// Additional meta-information.
	Meta map[string]string `protobuf:"bytes,5,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Transfer data.
	//
	// Types that are assignable to Data:
	//	*SniffData_Clr
	//	*SniffData_Jvm
	//	*SniffData_Meter
	//	*SniffData_Segment
	//	*SniffData_Log
	//	*SniffData_Instance
	//	*SniffData_Profile
	//	*SniffData_ServiceMesh
	//	*SniffData_Event
	//	*SniffData_InstancePing
	//	*SniffData_ProfileTaskQuery
	//	*SniffData_ProfileTaskFinish
	Data isSniffData_Data `protobuf_oneof:"data"`
}

func (x *SniffData) Reset() {
	*x = SniffData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_satellite_SniffData_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SniffData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SniffData) ProtoMessage() {}

func (x *SniffData) ProtoReflect() protoreflect.Message {
	mi := &file_satellite_SniffData_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SniffData.ProtoReflect.Descriptor instead.
func (*SniffData) Descriptor() ([]byte, []int) {
	return file_satellite_SniffData_proto_rawDescGZIP(), []int{0}
}

func (x *SniffData) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SniffData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SniffData) GetType() SniffType {
	if x != nil {
		return x.Type
	}
	return SniffType_CLRMetricType
}

func (x *SniffData) GetRemote() bool {
	if x != nil {
		return x.Remote
	}
	return false
}

func (x *SniffData) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (m *SniffData) GetData() isSniffData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *SniffData) GetClr() *v3.CLRMetricCollection {
	if x, ok := x.GetData().(*SniffData_Clr); ok {
		return x.Clr
	}
	return nil
}

func (x *SniffData) GetJvm() *v3.JVMMetricCollection {
	if x, ok := x.GetData().(*SniffData_Jvm); ok {
		return x.Jvm
	}
	return nil
}

func (x *SniffData) GetMeter() *v3.MeterData {
	if x, ok := x.GetData().(*SniffData_Meter); ok {
		return x.Meter
	}
	return nil
}

func (x *SniffData) GetSegment() *v3.SegmentObject {
	if x, ok := x.GetData().(*SniffData_Segment); ok {
		return x.Segment
	}
	return nil
}

func (x *SniffData) GetLog() *v31.LogData {
	if x, ok := x.GetData().(*SniffData_Log); ok {
		return x.Log
	}
	return nil
}

func (x *SniffData) GetInstance() *v32.InstanceProperties {
	if x, ok := x.GetData().(*SniffData_Instance); ok {
		return x.Instance
	}
	return nil
}

func (x *SniffData) GetProfile() *v33.ThreadSnapshot {
	if x, ok := x.GetData().(*SniffData_Profile); ok {
		return x.Profile
	}
	return nil
}

func (x *SniffData) GetServiceMesh() *v34.ServiceMeshMetric {
	if x, ok := x.GetData().(*SniffData_ServiceMesh); ok {
		return x.ServiceMesh
	}
	return nil
}

func (x *SniffData) GetEvent() *v35.Event {
	if x, ok := x.GetData().(*SniffData_Event); ok {
		return x.Event
	}
	return nil
}

func (x *SniffData) GetInstancePing() *v32.InstancePingPkg {
	if x, ok := x.GetData().(*SniffData_InstancePing); ok {
		return x.InstancePing
	}
	return nil
}

func (x *SniffData) GetProfileTaskQuery() *v33.ProfileTaskCommandQuery {
	if x, ok := x.GetData().(*SniffData_ProfileTaskQuery); ok {
		return x.ProfileTaskQuery
	}
	return nil
}

func (x *SniffData) GetProfileTaskFinish() *v33.ProfileTaskFinishReport {
	if x, ok := x.GetData().(*SniffData_ProfileTaskFinish); ok {
		return x.ProfileTaskFinish
	}
	return nil
}

type isSniffData_Data interface {
	isSniffData_Data()
}

type SniffData_Clr struct {
	Clr *v3.CLRMetricCollection `protobuf:"bytes,6,opt,name=clr,proto3,oneof"`
}

type SniffData_Jvm struct {
	Jvm *v3.JVMMetricCollection `protobuf:"bytes,7,opt,name=jvm,proto3,oneof"`
}

type SniffData_Meter struct {
	Meter *v3.MeterData `protobuf:"bytes,8,opt,name=meter,proto3,oneof"`
}

type SniffData_Segment struct {
	Segment *v3.SegmentObject `protobuf:"bytes,9,opt,name=segment,proto3,oneof"`
}

type SniffData_Log struct {
	Log *v31.LogData `protobuf:"bytes,10,opt,name=log,proto3,oneof"`
}

type SniffData_Instance struct {
	Instance *v32.InstanceProperties `protobuf:"bytes,11,opt,name=instance,proto3,oneof"`
}

type SniffData_Profile struct {
	Profile *v33.ThreadSnapshot `protobuf:"bytes,12,opt,name=profile,proto3,oneof"`
}

type SniffData_ServiceMesh struct {
	ServiceMesh *v34.ServiceMeshMetric `protobuf:"bytes,13,opt,name=serviceMesh,proto3,oneof"`
}

type SniffData_Event struct {
	Event *v35.Event `protobuf:"bytes,14,opt,name=event,proto3,oneof"`
}

type SniffData_InstancePing struct {
	InstancePing *v32.InstancePingPkg `protobuf:"bytes,15,opt,name=instancePing,proto3,oneof"`
}

type SniffData_ProfileTaskQuery struct {
	ProfileTaskQuery *v33.ProfileTaskCommandQuery `protobuf:"bytes,16,opt,name=profileTaskQuery,proto3,oneof"`
}

type SniffData_ProfileTaskFinish struct {
	ProfileTaskFinish *v33.ProfileTaskFinishReport `protobuf:"bytes,17,opt,name=profileTaskFinish,proto3,oneof"`
}

func (*SniffData_Clr) isSniffData_Data() {}

func (*SniffData_Jvm) isSniffData_Data() {}

func (*SniffData_Meter) isSniffData_Data() {}

func (*SniffData_Segment) isSniffData_Data() {}

func (*SniffData_Log) isSniffData_Data() {}

func (*SniffData_Instance) isSniffData_Data() {}

func (*SniffData_Profile) isSniffData_Data() {}

func (*SniffData_ServiceMesh) isSniffData_Data() {}

func (*SniffData_Event) isSniffData_Data() {}

func (*SniffData_InstancePing) isSniffData_Data() {}

func (*SniffData_ProfileTaskQuery) isSniffData_Data() {}

func (*SniffData_ProfileTaskFinish) isSniffData_Data() {}

var File_satellite_SniffData_proto protoreflect.FileDescriptor

var file_satellite_SniffData_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x2f, 0x53, 0x6e, 0x69, 0x66,
	0x66, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x6b, 0x79,
	0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x1a, 0x1e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x43, 0x4c, 0x52, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x4a, 0x56, 0x4d, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x4d, 0x65, 0x74, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x4c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x25, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe8, 0x07, 0x0a, 0x09, 0x53, 0x6e,
	0x69, 0x66, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x6e, 0x69, 0x66, 0x66, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12,
	0x36, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x6e,
	0x69, 0x66, 0x66, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x03, 0x63, 0x6c, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x4c, 0x52, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x63, 0x6c, 0x72, 0x12,
	0x36, 0x0a, 0x03, 0x6a, 0x76, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73,
	0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4a, 0x56, 0x4d,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x03, 0x6a, 0x76, 0x6d, 0x12, 0x30, 0x0a, 0x05, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x05, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6b, 0x79,
	0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33,
	0x2e, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12,
	0x3f, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x33, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x39, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x33, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73,
	0x68, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x44, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x69,
	0x6e, 0x67, 0x50, 0x6b, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x54, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x56, 0x0a, 0x11, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x06, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x2a, 0xa7, 0x01, 0x0a, 0x09, 0x53, 0x6e, 0x69, 0x66, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x52, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4a, 0x56, 0x4d, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x63, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x10, 0x07, 0x12,
	0x0d, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x08, 0x42, 0x34,
	0x5a, 0x32, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x2f, 0x67, 0x6f, 0x61,
	0x70, 0x69, 0x2f, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_satellite_SniffData_proto_rawDescOnce sync.Once
	file_satellite_SniffData_proto_rawDescData = file_satellite_SniffData_proto_rawDesc
)

func file_satellite_SniffData_proto_rawDescGZIP() []byte {
	file_satellite_SniffData_proto_rawDescOnce.Do(func() {
		file_satellite_SniffData_proto_rawDescData = protoimpl.X.CompressGZIP(file_satellite_SniffData_proto_rawDescData)
	})
	return file_satellite_SniffData_proto_rawDescData
}

var file_satellite_SniffData_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_satellite_SniffData_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_satellite_SniffData_proto_goTypes = []interface{}{
	(SniffType)(0),                      // 0: skywalking.v3.SniffType
	(*SniffData)(nil),                   // 1: skywalking.v3.SniffData
	nil,                                 // 2: skywalking.v3.SniffData.MetaEntry
	(*v3.CLRMetricCollection)(nil),      // 3: skywalking.v3.CLRMetricCollection
	(*v3.JVMMetricCollection)(nil),      // 4: skywalking.v3.JVMMetricCollection
	(*v3.MeterData)(nil),                // 5: skywalking.v3.MeterData
	(*v3.SegmentObject)(nil),            // 6: skywalking.v3.SegmentObject
	(*v31.LogData)(nil),                 // 7: skywalking.v3.LogData
	(*v32.InstanceProperties)(nil),      // 8: skywalking.v3.InstanceProperties
	(*v33.ThreadSnapshot)(nil),          // 9: skywalking.v3.ThreadSnapshot
	(*v34.ServiceMeshMetric)(nil),       // 10: skywalking.v3.ServiceMeshMetric
	(*v35.Event)(nil),                   // 11: skywalking.v3.Event
	(*v32.InstancePingPkg)(nil),         // 12: skywalking.v3.InstancePingPkg
	(*v33.ProfileTaskCommandQuery)(nil), // 13: skywalking.v3.ProfileTaskCommandQuery
	(*v33.ProfileTaskFinishReport)(nil), // 14: skywalking.v3.ProfileTaskFinishReport
}
var file_satellite_SniffData_proto_depIdxs = []int32{
	0,  // 0: skywalking.v3.SniffData.type:type_name -> skywalking.v3.SniffType
	2,  // 1: skywalking.v3.SniffData.meta:type_name -> skywalking.v3.SniffData.MetaEntry
	3,  // 2: skywalking.v3.SniffData.clr:type_name -> skywalking.v3.CLRMetricCollection
	4,  // 3: skywalking.v3.SniffData.jvm:type_name -> skywalking.v3.JVMMetricCollection
	5,  // 4: skywalking.v3.SniffData.meter:type_name -> skywalking.v3.MeterData
	6,  // 5: skywalking.v3.SniffData.segment:type_name -> skywalking.v3.SegmentObject
	7,  // 6: skywalking.v3.SniffData.log:type_name -> skywalking.v3.LogData
	8,  // 7: skywalking.v3.SniffData.instance:type_name -> skywalking.v3.InstanceProperties
	9,  // 8: skywalking.v3.SniffData.profile:type_name -> skywalking.v3.ThreadSnapshot
	10, // 9: skywalking.v3.SniffData.serviceMesh:type_name -> skywalking.v3.ServiceMeshMetric
	11, // 10: skywalking.v3.SniffData.event:type_name -> skywalking.v3.Event
	12, // 11: skywalking.v3.SniffData.instancePing:type_name -> skywalking.v3.InstancePingPkg
	13, // 12: skywalking.v3.SniffData.profileTaskQuery:type_name -> skywalking.v3.ProfileTaskCommandQuery
	14, // 13: skywalking.v3.SniffData.profileTaskFinish:type_name -> skywalking.v3.ProfileTaskFinishReport
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_satellite_SniffData_proto_init() }
func file_satellite_SniffData_proto_init() {
	if File_satellite_SniffData_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_satellite_SniffData_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SniffData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_satellite_SniffData_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SniffData_Clr)(nil),
		(*SniffData_Jvm)(nil),
		(*SniffData_Meter)(nil),
		(*SniffData_Segment)(nil),
		(*SniffData_Log)(nil),
		(*SniffData_Instance)(nil),
		(*SniffData_Profile)(nil),
		(*SniffData_ServiceMesh)(nil),
		(*SniffData_Event)(nil),
		(*SniffData_InstancePing)(nil),
		(*SniffData_ProfileTaskQuery)(nil),
		(*SniffData_ProfileTaskFinish)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_satellite_SniffData_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_satellite_SniffData_proto_goTypes,
		DependencyIndexes: file_satellite_SniffData_proto_depIdxs,
		EnumInfos:         file_satellite_SniffData_proto_enumTypes,
		MessageInfos:      file_satellite_SniffData_proto_msgTypes,
	}.Build()
	File_satellite_SniffData_proto = out.File
	file_satellite_SniffData_proto_rawDesc = nil
	file_satellite_SniffData_proto_goTypes = nil
	file_satellite_SniffData_proto_depIdxs = nil
}
